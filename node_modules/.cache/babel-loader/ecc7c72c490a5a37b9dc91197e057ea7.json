{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TsCompiler = void 0;\nvar path_1 = require(\"path\");\nvar bs_logger_1 = require(\"bs-logger\");\nvar lodash_memoize_1 = __importDefault(require(\"lodash.memoize\"));\nvar constants_1 = require(\"../constants\");\nvar utils_1 = require(\"../utils\");\nvar messages_1 = require(\"../utils/messages\");\nvar compiler_utils_1 = require(\"./compiler-utils\");\nvar TsCompiler = function () {\n  function TsCompiler(configSet, runtimeCacheFS) {\n    var _a;\n    var _this = this;\n    this.configSet = configSet;\n    this.runtimeCacheFS = runtimeCacheFS;\n    this._projectVersion = 1;\n    this._ts = configSet.compilerModule;\n    this._logger = utils_1.rootLogger.child({\n      namespace: 'ts-compiler'\n    });\n    this._parsedTsConfig = this.configSet.parsedTsConfig;\n    this._initialCompilerOptions = __assign({}, this._parsedTsConfig.options);\n    this._compilerOptions = __assign({}, this._initialCompilerOptions);\n    this._runtimeCacheFS = runtimeCacheFS;\n    if (!this.configSet.isolatedModules) {\n      this._fileContentCache = new Map();\n      this._fileVersionCache = new Map();\n      this._cachedReadFile = this._logger.wrap((_a = {\n        namespace: 'ts:serviceHost',\n        call: null\n      }, _a[bs_logger_1.LogContexts.logLevel] = bs_logger_1.LogLevels.trace, _a), 'readFile', (0, lodash_memoize_1.default)(this._ts.sys.readFile));\n      this._moduleResolutionHost = {\n        fileExists: (0, lodash_memoize_1.default)(this._ts.sys.fileExists),\n        readFile: this._cachedReadFile,\n        directoryExists: (0, lodash_memoize_1.default)(this._ts.sys.directoryExists),\n        getCurrentDirectory: function () {\n          return _this.configSet.cwd;\n        },\n        realpath: this._ts.sys.realpath && (0, lodash_memoize_1.default)(this._ts.sys.realpath),\n        getDirectories: (0, lodash_memoize_1.default)(this._ts.sys.getDirectories)\n      };\n      this._moduleResolutionCache = this._ts.createModuleResolutionCache(this.configSet.cwd, function (x) {\n        return x;\n      }, this._compilerOptions);\n      this._createLanguageService();\n    }\n  }\n  TsCompiler.prototype.getResolvedModules = function (fileContent, fileName, runtimeCacheFS) {\n    var _this = this;\n    if (!this.runtimeCacheFS.size) {\n      this._runtimeCacheFS = runtimeCacheFS;\n    }\n    this._logger.debug({\n      fileName: fileName\n    }, 'getResolvedModules(): resolve direct imported module paths');\n    var importedModulePaths = Array.from(new Set(this._getImportedModulePaths(fileContent, fileName)));\n    this._logger.debug({\n      fileName: fileName\n    }, 'getResolvedModules(): resolve nested imported module paths from directed imported module paths');\n    importedModulePaths.forEach(function (importedModulePath) {\n      var resolvedFileContent = _this._getFileContentFromCache(importedModulePath);\n      importedModulePaths.push.apply(importedModulePaths, __spreadArray([], __read(_this._getImportedModulePaths(resolvedFileContent, importedModulePath).filter(function (modulePath) {\n        return !importedModulePaths.includes(modulePath);\n      })), false));\n    });\n    return importedModulePaths;\n  };\n  TsCompiler.prototype.getCompiledOutput = function (fileContent, fileName, options) {\n    var moduleKind = this._initialCompilerOptions.module;\n    var esModuleInterop = this._initialCompilerOptions.esModuleInterop;\n    var allowSyntheticDefaultImports = this._initialCompilerOptions.allowSyntheticDefaultImports;\n    var currentModuleKind = this._compilerOptions.module;\n    if ((this.configSet.babelJestTransformer || !this.configSet.babelJestTransformer && options.supportsStaticESM) && this.configSet.useESM) {\n      moduleKind = !moduleKind || moduleKind && ![this._ts.ModuleKind.ES2015, this._ts.ModuleKind.ES2020, this._ts.ModuleKind.ESNext].includes(moduleKind) ? this._ts.ModuleKind.ESNext : moduleKind;\n      esModuleInterop = true;\n      allowSyntheticDefaultImports = true;\n    } else {\n      moduleKind = this._ts.ModuleKind.CommonJS;\n    }\n    this._compilerOptions = __assign(__assign({}, this._compilerOptions), {\n      allowSyntheticDefaultImports: allowSyntheticDefaultImports,\n      esModuleInterop: esModuleInterop,\n      module: moduleKind\n    });\n    if (this._languageService) {\n      this._logger.debug({\n        fileName: fileName\n      }, 'getCompiledOutput(): compiling using language service');\n      this._updateMemoryCache(fileContent, fileName, currentModuleKind === moduleKind);\n      var output = this._languageService.getEmitOutput(fileName);\n      this._doTypeChecking(fileName, options.depGraphs, options.watchMode);\n      if (output.emitSkipped) {\n        if (constants_1.TS_TSX_REGEX.test(fileName)) {\n          throw new Error((0, messages_1.interpolate)(\"Unable to process '{{file}}', please make sure that `outDir` in your tsconfig is neither `''` or `'.'`. You can also configure Jest config option `transformIgnorePatterns` to inform `ts-jest` to transform {{file}}\", {\n            file: fileName\n          }));\n        } else {\n          this._logger.warn((0, messages_1.interpolate)(\"Unable to process '{{file}}', falling back to original file content. You can also configure Jest config option `transformIgnorePatterns` to ignore {{file}} from transformation or make sure that `outDir` in your tsconfig is neither `''` or `'.'`\", {\n            file: fileName\n          }));\n          return (0, compiler_utils_1.updateOutput)(fileContent, fileName, undefined);\n        }\n      }\n      if (!output.outputFiles.length) {\n        throw new TypeError((0, messages_1.interpolate)(\"Unable to require `.d.ts` file for file: {{file}}.\\nThis is usually the result of a faulty configuration or import. Make sure there is a `.js`, `.json` or another executable extension available alongside `{{file}}`.\", {\n          file: (0, path_1.basename)(fileName)\n        }));\n      }\n      return this._compilerOptions.sourceMap ? (0, compiler_utils_1.updateOutput)(output.outputFiles[1].text, fileName, output.outputFiles[0].text) : (0, compiler_utils_1.updateOutput)(output.outputFiles[0].text, fileName, undefined);\n    } else {\n      this._logger.debug({\n        fileName: fileName\n      }, 'getCompiledOutput(): compiling as isolated module');\n      var result = this._transpileOutput(fileContent, fileName);\n      if (result.diagnostics && this.configSet.shouldReportDiagnostics(fileName)) {\n        this.configSet.raiseDiagnostics(result.diagnostics, fileName, this._logger);\n      }\n      return (0, compiler_utils_1.updateOutput)(result.outputText, fileName, result.sourceMapText);\n    }\n  };\n  TsCompiler.prototype._transpileOutput = function (fileContent, fileName) {\n    return this._ts.transpileModule(fileContent, {\n      fileName: fileName,\n      transformers: this._makeTransformers(this.configSet.resolvedTransformers),\n      compilerOptions: this._compilerOptions,\n      reportDiagnostics: this.configSet.shouldReportDiagnostics(fileName)\n    });\n  };\n  TsCompiler.prototype._makeTransformers = function (customTransformers) {\n    var _this = this;\n    return {\n      before: customTransformers.before.map(function (beforeTransformer) {\n        return beforeTransformer.factory(_this, beforeTransformer.options);\n      }),\n      after: customTransformers.after.map(function (afterTransformer) {\n        return afterTransformer.factory(_this, afterTransformer.options);\n      }),\n      afterDeclarations: customTransformers.afterDeclarations.map(function (afterDeclarations) {\n        return afterDeclarations.factory(_this, afterDeclarations.options);\n      })\n    };\n  };\n  TsCompiler.prototype._createLanguageService = function () {\n    var _this = this;\n    this._parsedTsConfig.fileNames.filter(function (fileName) {\n      return constants_1.TS_TSX_REGEX.test(fileName) && !_this.configSet.isTestFile(fileName);\n    }).forEach(function (fileName) {\n      return _this._fileVersionCache.set(fileName, 0);\n    });\n    var serviceHost = {\n      getProjectVersion: function () {\n        return String(_this._projectVersion);\n      },\n      getScriptFileNames: function () {\n        return __spreadArray([], __read(_this._fileVersionCache.keys()), false);\n      },\n      getScriptVersion: function (fileName) {\n        var normalizedFileName = (0, path_1.normalize)(fileName);\n        var version = _this._fileVersionCache.get(normalizedFileName);\n        return version === undefined ? undefined : String(version);\n      },\n      getScriptSnapshot: function (fileName) {\n        var _a, _b, _c, _d;\n        var normalizedFileName = (0, path_1.normalize)(fileName);\n        var hit = _this._isFileInCache(normalizedFileName);\n        _this._logger.trace({\n          normalizedFileName: normalizedFileName,\n          cacheHit: hit\n        }, 'getScriptSnapshot():', 'cache', hit ? 'hit' : 'miss');\n        if (!hit) {\n          var fileContent = (_d = (_b = (_a = _this._fileContentCache.get(normalizedFileName)) !== null && _a !== void 0 ? _a : _this._runtimeCacheFS.get(normalizedFileName)) !== null && _b !== void 0 ? _b : (_c = _this._cachedReadFile) === null || _c === void 0 ? void 0 : _c.call(_this, normalizedFileName)) !== null && _d !== void 0 ? _d : undefined;\n          if (fileContent !== undefined) {\n            _this._fileContentCache.set(normalizedFileName, fileContent);\n            _this._fileVersionCache.set(normalizedFileName, 1);\n          }\n        }\n        var contents = _this._fileContentCache.get(normalizedFileName);\n        if (contents === undefined) return;\n        return _this._ts.ScriptSnapshot.fromString(contents);\n      },\n      fileExists: (0, lodash_memoize_1.default)(this._ts.sys.fileExists),\n      readFile: this._cachedReadFile,\n      readDirectory: (0, lodash_memoize_1.default)(this._ts.sys.readDirectory),\n      getDirectories: (0, lodash_memoize_1.default)(this._ts.sys.getDirectories),\n      directoryExists: (0, lodash_memoize_1.default)(this._ts.sys.directoryExists),\n      realpath: this._ts.sys.realpath && (0, lodash_memoize_1.default)(this._ts.sys.realpath),\n      getNewLine: function () {\n        return constants_1.LINE_FEED;\n      },\n      getCurrentDirectory: function () {\n        return _this.configSet.cwd;\n      },\n      getCompilationSettings: function () {\n        return _this._compilerOptions;\n      },\n      getDefaultLibFileName: function () {\n        return _this._ts.getDefaultLibFilePath(_this._compilerOptions);\n      },\n      getCustomTransformers: function () {\n        return _this._makeTransformers(_this.configSet.resolvedTransformers);\n      },\n      resolveModuleNames: function (moduleNames, containingFile) {\n        return moduleNames.map(function (moduleName) {\n          return _this._resolveModuleName(moduleName, containingFile).resolvedModule;\n        });\n      }\n    };\n    this._logger.debug('created language service');\n    this._languageService = this._ts.createLanguageService(serviceHost, this._ts.createDocumentRegistry());\n    this.program = this._languageService.getProgram();\n  };\n  TsCompiler.prototype._getFileContentFromCache = function (filePath) {\n    var normalizedFilePath = (0, path_1.normalize)(filePath);\n    var resolvedFileContent = this._runtimeCacheFS.get(normalizedFilePath);\n    if (!resolvedFileContent) {\n      resolvedFileContent = this._moduleResolutionHost.readFile(normalizedFilePath);\n      this._runtimeCacheFS.set(normalizedFilePath, resolvedFileContent);\n    }\n    return resolvedFileContent;\n  };\n  TsCompiler.prototype._getImportedModulePaths = function (resolvedFileContent, containingFile) {\n    var _this = this;\n    return this._ts.preProcessFile(resolvedFileContent, true, true).importedFiles.map(function (importedFile) {\n      var resolvedModule = _this._resolveModuleName(importedFile.fileName, containingFile).resolvedModule;\n      var resolvedFileName = resolvedModule === null || resolvedModule === void 0 ? void 0 : resolvedModule.resolvedFileName;\n      return resolvedFileName && !(resolvedModule === null || resolvedModule === void 0 ? void 0 : resolvedModule.isExternalLibraryImport) ? resolvedFileName : '';\n    }).filter(function (resolveFileName) {\n      return !!resolveFileName;\n    });\n  };\n  TsCompiler.prototype._resolveModuleName = function (moduleNameToResolve, containingFile) {\n    return this._ts.resolveModuleName(moduleNameToResolve, containingFile, this._compilerOptions, this._moduleResolutionHost, this._moduleResolutionCache);\n  };\n  TsCompiler.prototype._isFileInCache = function (fileName) {\n    return this._fileContentCache.has(fileName) && this._fileVersionCache.has(fileName) && this._fileVersionCache.get(fileName) !== 0;\n  };\n  TsCompiler.prototype._updateMemoryCache = function (contents, fileName, isModuleKindTheSame) {\n    if (isModuleKindTheSame === void 0) {\n      isModuleKindTheSame = true;\n    }\n    this._logger.debug({\n      fileName: fileName\n    }, 'updateMemoryCache: update memory cache for language service');\n    var shouldIncrementProjectVersion = false;\n    var hit = this._isFileInCache(fileName);\n    if (!hit) {\n      this._fileVersionCache.set(fileName, 1);\n      shouldIncrementProjectVersion = true;\n    } else {\n      var prevVersion = this._fileVersionCache.get(fileName);\n      var previousContents = this._fileContentCache.get(fileName);\n      if (previousContents !== contents) {\n        this._fileVersionCache.set(fileName, prevVersion + 1);\n        this._fileContentCache.set(fileName, contents);\n        shouldIncrementProjectVersion = true;\n      }\n      if (!this._parsedTsConfig.fileNames.includes(fileName) || !isModuleKindTheSame) {\n        shouldIncrementProjectVersion = true;\n      }\n    }\n    if (shouldIncrementProjectVersion) this._projectVersion++;\n  };\n  TsCompiler.prototype._doTypeChecking = function (fileName, depGraphs, watchMode) {\n    var e_1, _a;\n    if (this.configSet.shouldReportDiagnostics(fileName)) {\n      this._logger.debug({\n        fileName: fileName\n      }, '_doTypeChecking(): computing diagnostics using language service');\n      var diagnostics = __spreadArray(__spreadArray([], __read(this._languageService.getSemanticDiagnostics(fileName)), false), __read(this._languageService.getSyntacticDiagnostics(fileName)), false);\n      this.configSet.raiseDiagnostics(diagnostics, fileName, this._logger);\n    }\n    if (watchMode) {\n      this._logger.debug({\n        fileName: fileName\n      }, '_doTypeChecking(): starting watch mode computing diagnostics');\n      try {\n        for (var _b = __values(depGraphs.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var entry = _c.value;\n          var normalizedModuleNames = entry[1].resolvedModuleNames.map(function (moduleName) {\n            return (0, path_1.normalize)(moduleName);\n          });\n          var fileToReTypeCheck = entry[0];\n          if (normalizedModuleNames.includes(fileName) && this.configSet.shouldReportDiagnostics(fileToReTypeCheck)) {\n            this._logger.debug({\n              fileToReTypeCheck: fileToReTypeCheck\n            }, '_doTypeChecking(): computing diagnostics using language service');\n            this._updateMemoryCache(this._getFileContentFromCache(fileToReTypeCheck), fileToReTypeCheck);\n            var importedModulesDiagnostics = __spreadArray(__spreadArray([], __read(this._languageService.getSemanticDiagnostics(fileToReTypeCheck)), false), __read(this._languageService.getSyntacticDiagnostics(fileToReTypeCheck)), false);\n            this.configSet.raiseDiagnostics(importedModulesDiagnostics, fileName, this._logger);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  return TsCompiler;\n}();\nexports.TsCompiler = TsCompiler;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__read","o","m","Symbol","iterator","r","ar","e","next","done","push","value","error","__spreadArray","to","from","pack","l","Array","slice","concat","__values","TypeError","__importDefault","mod","__esModule","defineProperty","exports","TsCompiler","path_1","require","bs_logger_1","lodash_memoize_1","constants_1","utils_1","messages_1","compiler_utils_1","configSet","runtimeCacheFS","_a","_this","_projectVersion","_ts","compilerModule","_logger","rootLogger","child","namespace","_parsedTsConfig","parsedTsConfig","_initialCompilerOptions","options","_compilerOptions","_runtimeCacheFS","isolatedModules","_fileContentCache","Map","_fileVersionCache","_cachedReadFile","wrap","LogContexts","logLevel","LogLevels","trace","default","sys","readFile","_moduleResolutionHost","fileExists","directoryExists","getCurrentDirectory","cwd","realpath","getDirectories","_moduleResolutionCache","createModuleResolutionCache","x","_createLanguageService","getResolvedModules","fileContent","fileName","size","debug","importedModulePaths","Set","_getImportedModulePaths","forEach","importedModulePath","resolvedFileContent","_getFileContentFromCache","filter","modulePath","includes","getCompiledOutput","moduleKind","module","esModuleInterop","allowSyntheticDefaultImports","currentModuleKind","babelJestTransformer","supportsStaticESM","useESM","ModuleKind","ES2015","ES2020","ESNext","CommonJS","_languageService","_updateMemoryCache","output","getEmitOutput","_doTypeChecking","depGraphs","watchMode","emitSkipped","TS_TSX_REGEX","test","Error","interpolate","file","warn","updateOutput","undefined","outputFiles","basename","sourceMap","text","result","_transpileOutput","diagnostics","shouldReportDiagnostics","raiseDiagnostics","outputText","sourceMapText","transpileModule","transformers","_makeTransformers","resolvedTransformers","compilerOptions","reportDiagnostics","customTransformers","before","map","beforeTransformer","factory","after","afterTransformer","afterDeclarations","fileNames","isTestFile","set","serviceHost","getProjectVersion","String","getScriptFileNames","keys","getScriptVersion","normalizedFileName","normalize","version","get","getScriptSnapshot","_b","_c","_d","hit","_isFileInCache","cacheHit","contents","ScriptSnapshot","fromString","readDirectory","getNewLine","LINE_FEED","getCompilationSettings","getDefaultLibFileName","getDefaultLibFilePath","getCustomTransformers","resolveModuleNames","moduleNames","containingFile","moduleName","_resolveModuleName","resolvedModule","createLanguageService","createDocumentRegistry","program","getProgram","filePath","normalizedFilePath","preProcessFile","importedFiles","importedFile","resolvedFileName","isExternalLibraryImport","resolveFileName","moduleNameToResolve","resolveModuleName","has","isModuleKindTheSame","shouldIncrementProjectVersion","prevVersion","previousContents","e_1","getSemanticDiagnostics","getSyntacticDiagnostics","entries","entry","normalizedModuleNames","resolvedModuleNames","fileToReTypeCheck","importedModulesDiagnostics","e_1_1","return"],"sources":["/Users/ujjvalsharma/Desktop/sde-final-project/Tuiter-Project-React/node_modules/ts-jest/dist/compiler/ts-compiler.js"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TsCompiler = void 0;\nvar path_1 = require(\"path\");\nvar bs_logger_1 = require(\"bs-logger\");\nvar lodash_memoize_1 = __importDefault(require(\"lodash.memoize\"));\nvar constants_1 = require(\"../constants\");\nvar utils_1 = require(\"../utils\");\nvar messages_1 = require(\"../utils/messages\");\nvar compiler_utils_1 = require(\"./compiler-utils\");\nvar TsCompiler = (function () {\n    function TsCompiler(configSet, runtimeCacheFS) {\n        var _a;\n        var _this = this;\n        this.configSet = configSet;\n        this.runtimeCacheFS = runtimeCacheFS;\n        this._projectVersion = 1;\n        this._ts = configSet.compilerModule;\n        this._logger = utils_1.rootLogger.child({ namespace: 'ts-compiler' });\n        this._parsedTsConfig = this.configSet.parsedTsConfig;\n        this._initialCompilerOptions = __assign({}, this._parsedTsConfig.options);\n        this._compilerOptions = __assign({}, this._initialCompilerOptions);\n        this._runtimeCacheFS = runtimeCacheFS;\n        if (!this.configSet.isolatedModules) {\n            this._fileContentCache = new Map();\n            this._fileVersionCache = new Map();\n            this._cachedReadFile = this._logger.wrap((_a = {\n                    namespace: 'ts:serviceHost',\n                    call: null\n                },\n                _a[bs_logger_1.LogContexts.logLevel] = bs_logger_1.LogLevels.trace,\n                _a), 'readFile', (0, lodash_memoize_1.default)(this._ts.sys.readFile));\n            this._moduleResolutionHost = {\n                fileExists: (0, lodash_memoize_1.default)(this._ts.sys.fileExists),\n                readFile: this._cachedReadFile,\n                directoryExists: (0, lodash_memoize_1.default)(this._ts.sys.directoryExists),\n                getCurrentDirectory: function () { return _this.configSet.cwd; },\n                realpath: this._ts.sys.realpath && (0, lodash_memoize_1.default)(this._ts.sys.realpath),\n                getDirectories: (0, lodash_memoize_1.default)(this._ts.sys.getDirectories),\n            };\n            this._moduleResolutionCache = this._ts.createModuleResolutionCache(this.configSet.cwd, function (x) { return x; }, this._compilerOptions);\n            this._createLanguageService();\n        }\n    }\n    TsCompiler.prototype.getResolvedModules = function (fileContent, fileName, runtimeCacheFS) {\n        var _this = this;\n        if (!this.runtimeCacheFS.size) {\n            this._runtimeCacheFS = runtimeCacheFS;\n        }\n        this._logger.debug({ fileName: fileName }, 'getResolvedModules(): resolve direct imported module paths');\n        var importedModulePaths = Array.from(new Set(this._getImportedModulePaths(fileContent, fileName)));\n        this._logger.debug({ fileName: fileName }, 'getResolvedModules(): resolve nested imported module paths from directed imported module paths');\n        importedModulePaths.forEach(function (importedModulePath) {\n            var resolvedFileContent = _this._getFileContentFromCache(importedModulePath);\n            importedModulePaths.push.apply(importedModulePaths, __spreadArray([], __read(_this._getImportedModulePaths(resolvedFileContent, importedModulePath).filter(function (modulePath) { return !importedModulePaths.includes(modulePath); })), false));\n        });\n        return importedModulePaths;\n    };\n    TsCompiler.prototype.getCompiledOutput = function (fileContent, fileName, options) {\n        var moduleKind = this._initialCompilerOptions.module;\n        var esModuleInterop = this._initialCompilerOptions.esModuleInterop;\n        var allowSyntheticDefaultImports = this._initialCompilerOptions.allowSyntheticDefaultImports;\n        var currentModuleKind = this._compilerOptions.module;\n        if ((this.configSet.babelJestTransformer || (!this.configSet.babelJestTransformer && options.supportsStaticESM)) &&\n            this.configSet.useESM) {\n            moduleKind =\n                !moduleKind ||\n                    (moduleKind &&\n                        ![this._ts.ModuleKind.ES2015, this._ts.ModuleKind.ES2020, this._ts.ModuleKind.ESNext].includes(moduleKind))\n                    ? this._ts.ModuleKind.ESNext\n                    : moduleKind;\n            esModuleInterop = true;\n            allowSyntheticDefaultImports = true;\n        }\n        else {\n            moduleKind = this._ts.ModuleKind.CommonJS;\n        }\n        this._compilerOptions = __assign(__assign({}, this._compilerOptions), { allowSyntheticDefaultImports: allowSyntheticDefaultImports, esModuleInterop: esModuleInterop, module: moduleKind });\n        if (this._languageService) {\n            this._logger.debug({ fileName: fileName }, 'getCompiledOutput(): compiling using language service');\n            this._updateMemoryCache(fileContent, fileName, currentModuleKind === moduleKind);\n            var output = this._languageService.getEmitOutput(fileName);\n            this._doTypeChecking(fileName, options.depGraphs, options.watchMode);\n            if (output.emitSkipped) {\n                if (constants_1.TS_TSX_REGEX.test(fileName)) {\n                    throw new Error((0, messages_1.interpolate)(\"Unable to process '{{file}}', please make sure that `outDir` in your tsconfig is neither `''` or `'.'`. You can also configure Jest config option `transformIgnorePatterns` to inform `ts-jest` to transform {{file}}\", { file: fileName }));\n                }\n                else {\n                    this._logger.warn((0, messages_1.interpolate)(\"Unable to process '{{file}}', falling back to original file content. You can also configure Jest config option `transformIgnorePatterns` to ignore {{file}} from transformation or make sure that `outDir` in your tsconfig is neither `''` or `'.'`\", { file: fileName }));\n                    return (0, compiler_utils_1.updateOutput)(fileContent, fileName, undefined);\n                }\n            }\n            if (!output.outputFiles.length) {\n                throw new TypeError((0, messages_1.interpolate)(\"Unable to require `.d.ts` file for file: {{file}}.\\nThis is usually the result of a faulty configuration or import. Make sure there is a `.js`, `.json` or another executable extension available alongside `{{file}}`.\", {\n                    file: (0, path_1.basename)(fileName),\n                }));\n            }\n            return this._compilerOptions.sourceMap\n                ? (0, compiler_utils_1.updateOutput)(output.outputFiles[1].text, fileName, output.outputFiles[0].text)\n                : (0, compiler_utils_1.updateOutput)(output.outputFiles[0].text, fileName, undefined);\n        }\n        else {\n            this._logger.debug({ fileName: fileName }, 'getCompiledOutput(): compiling as isolated module');\n            var result = this._transpileOutput(fileContent, fileName);\n            if (result.diagnostics && this.configSet.shouldReportDiagnostics(fileName)) {\n                this.configSet.raiseDiagnostics(result.diagnostics, fileName, this._logger);\n            }\n            return (0, compiler_utils_1.updateOutput)(result.outputText, fileName, result.sourceMapText);\n        }\n    };\n    TsCompiler.prototype._transpileOutput = function (fileContent, fileName) {\n        return this._ts.transpileModule(fileContent, {\n            fileName: fileName,\n            transformers: this._makeTransformers(this.configSet.resolvedTransformers),\n            compilerOptions: this._compilerOptions,\n            reportDiagnostics: this.configSet.shouldReportDiagnostics(fileName),\n        });\n    };\n    TsCompiler.prototype._makeTransformers = function (customTransformers) {\n        var _this = this;\n        return {\n            before: customTransformers.before.map(function (beforeTransformer) {\n                return beforeTransformer.factory(_this, beforeTransformer.options);\n            }),\n            after: customTransformers.after.map(function (afterTransformer) {\n                return afterTransformer.factory(_this, afterTransformer.options);\n            }),\n            afterDeclarations: customTransformers.afterDeclarations.map(function (afterDeclarations) {\n                return afterDeclarations.factory(_this, afterDeclarations.options);\n            }),\n        };\n    };\n    TsCompiler.prototype._createLanguageService = function () {\n        var _this = this;\n        this._parsedTsConfig.fileNames\n            .filter(function (fileName) { return constants_1.TS_TSX_REGEX.test(fileName) && !_this.configSet.isTestFile(fileName); })\n            .forEach(function (fileName) { return _this._fileVersionCache.set(fileName, 0); });\n        var serviceHost = {\n            getProjectVersion: function () { return String(_this._projectVersion); },\n            getScriptFileNames: function () { return __spreadArray([], __read(_this._fileVersionCache.keys()), false); },\n            getScriptVersion: function (fileName) {\n                var normalizedFileName = (0, path_1.normalize)(fileName);\n                var version = _this._fileVersionCache.get(normalizedFileName);\n                return version === undefined ? undefined : String(version);\n            },\n            getScriptSnapshot: function (fileName) {\n                var _a, _b, _c, _d;\n                var normalizedFileName = (0, path_1.normalize)(fileName);\n                var hit = _this._isFileInCache(normalizedFileName);\n                _this._logger.trace({ normalizedFileName: normalizedFileName, cacheHit: hit }, 'getScriptSnapshot():', 'cache', hit ? 'hit' : 'miss');\n                if (!hit) {\n                    var fileContent = (_d = (_b = (_a = _this._fileContentCache.get(normalizedFileName)) !== null && _a !== void 0 ? _a : _this._runtimeCacheFS.get(normalizedFileName)) !== null && _b !== void 0 ? _b : (_c = _this._cachedReadFile) === null || _c === void 0 ? void 0 : _c.call(_this, normalizedFileName)) !== null && _d !== void 0 ? _d : undefined;\n                    if (fileContent !== undefined) {\n                        _this._fileContentCache.set(normalizedFileName, fileContent);\n                        _this._fileVersionCache.set(normalizedFileName, 1);\n                    }\n                }\n                var contents = _this._fileContentCache.get(normalizedFileName);\n                if (contents === undefined)\n                    return;\n                return _this._ts.ScriptSnapshot.fromString(contents);\n            },\n            fileExists: (0, lodash_memoize_1.default)(this._ts.sys.fileExists),\n            readFile: this._cachedReadFile,\n            readDirectory: (0, lodash_memoize_1.default)(this._ts.sys.readDirectory),\n            getDirectories: (0, lodash_memoize_1.default)(this._ts.sys.getDirectories),\n            directoryExists: (0, lodash_memoize_1.default)(this._ts.sys.directoryExists),\n            realpath: this._ts.sys.realpath && (0, lodash_memoize_1.default)(this._ts.sys.realpath),\n            getNewLine: function () { return constants_1.LINE_FEED; },\n            getCurrentDirectory: function () { return _this.configSet.cwd; },\n            getCompilationSettings: function () { return _this._compilerOptions; },\n            getDefaultLibFileName: function () { return _this._ts.getDefaultLibFilePath(_this._compilerOptions); },\n            getCustomTransformers: function () { return _this._makeTransformers(_this.configSet.resolvedTransformers); },\n            resolveModuleNames: function (moduleNames, containingFile) {\n                return moduleNames.map(function (moduleName) { return _this._resolveModuleName(moduleName, containingFile).resolvedModule; });\n            },\n        };\n        this._logger.debug('created language service');\n        this._languageService = this._ts.createLanguageService(serviceHost, this._ts.createDocumentRegistry());\n        this.program = this._languageService.getProgram();\n    };\n    TsCompiler.prototype._getFileContentFromCache = function (filePath) {\n        var normalizedFilePath = (0, path_1.normalize)(filePath);\n        var resolvedFileContent = this._runtimeCacheFS.get(normalizedFilePath);\n        if (!resolvedFileContent) {\n            resolvedFileContent = this._moduleResolutionHost.readFile(normalizedFilePath);\n            this._runtimeCacheFS.set(normalizedFilePath, resolvedFileContent);\n        }\n        return resolvedFileContent;\n    };\n    TsCompiler.prototype._getImportedModulePaths = function (resolvedFileContent, containingFile) {\n        var _this = this;\n        return this._ts\n            .preProcessFile(resolvedFileContent, true, true)\n            .importedFiles.map(function (importedFile) {\n            var resolvedModule = _this._resolveModuleName(importedFile.fileName, containingFile).resolvedModule;\n            var resolvedFileName = resolvedModule === null || resolvedModule === void 0 ? void 0 : resolvedModule.resolvedFileName;\n            return resolvedFileName && !(resolvedModule === null || resolvedModule === void 0 ? void 0 : resolvedModule.isExternalLibraryImport) ? resolvedFileName : '';\n        })\n            .filter(function (resolveFileName) { return !!resolveFileName; });\n    };\n    TsCompiler.prototype._resolveModuleName = function (moduleNameToResolve, containingFile) {\n        return this._ts.resolveModuleName(moduleNameToResolve, containingFile, this._compilerOptions, this._moduleResolutionHost, this._moduleResolutionCache);\n    };\n    TsCompiler.prototype._isFileInCache = function (fileName) {\n        return (this._fileContentCache.has(fileName) &&\n            this._fileVersionCache.has(fileName) &&\n            this._fileVersionCache.get(fileName) !== 0);\n    };\n    TsCompiler.prototype._updateMemoryCache = function (contents, fileName, isModuleKindTheSame) {\n        if (isModuleKindTheSame === void 0) { isModuleKindTheSame = true; }\n        this._logger.debug({ fileName: fileName }, 'updateMemoryCache: update memory cache for language service');\n        var shouldIncrementProjectVersion = false;\n        var hit = this._isFileInCache(fileName);\n        if (!hit) {\n            this._fileVersionCache.set(fileName, 1);\n            shouldIncrementProjectVersion = true;\n        }\n        else {\n            var prevVersion = this._fileVersionCache.get(fileName);\n            var previousContents = this._fileContentCache.get(fileName);\n            if (previousContents !== contents) {\n                this._fileVersionCache.set(fileName, prevVersion + 1);\n                this._fileContentCache.set(fileName, contents);\n                shouldIncrementProjectVersion = true;\n            }\n            if (!this._parsedTsConfig.fileNames.includes(fileName) || !isModuleKindTheSame) {\n                shouldIncrementProjectVersion = true;\n            }\n        }\n        if (shouldIncrementProjectVersion)\n            this._projectVersion++;\n    };\n    TsCompiler.prototype._doTypeChecking = function (fileName, depGraphs, watchMode) {\n        var e_1, _a;\n        if (this.configSet.shouldReportDiagnostics(fileName)) {\n            this._logger.debug({ fileName: fileName }, '_doTypeChecking(): computing diagnostics using language service');\n            var diagnostics = __spreadArray(__spreadArray([], __read(this._languageService.getSemanticDiagnostics(fileName)), false), __read(this._languageService.getSyntacticDiagnostics(fileName)), false);\n            this.configSet.raiseDiagnostics(diagnostics, fileName, this._logger);\n        }\n        if (watchMode) {\n            this._logger.debug({ fileName: fileName }, '_doTypeChecking(): starting watch mode computing diagnostics');\n            try {\n                for (var _b = __values(depGraphs.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var entry = _c.value;\n                    var normalizedModuleNames = entry[1].resolvedModuleNames.map(function (moduleName) { return (0, path_1.normalize)(moduleName); });\n                    var fileToReTypeCheck = entry[0];\n                    if (normalizedModuleNames.includes(fileName) && this.configSet.shouldReportDiagnostics(fileToReTypeCheck)) {\n                        this._logger.debug({ fileToReTypeCheck: fileToReTypeCheck }, '_doTypeChecking(): computing diagnostics using language service');\n                        this._updateMemoryCache(this._getFileContentFromCache(fileToReTypeCheck), fileToReTypeCheck);\n                        var importedModulesDiagnostics = __spreadArray(__spreadArray([], __read(this._languageService.getSemanticDiagnostics(fileToReTypeCheck)), false), __read(this._languageService.getSyntacticDiagnostics(fileToReTypeCheck)), false);\n                        this.configSet.raiseDiagnostics(importedModulesDiagnostics, fileName, this._logger);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n    };\n    return TsCompiler;\n}());\nexports.TsCompiler = TsCompiler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}